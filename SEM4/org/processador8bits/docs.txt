USO: 
	CIRCUITO: 
		Abrir o arquivo "processador8Bits" com o programa "Digital"
		Para usar: 
			copie as instruções do arquivo "instructions" gerado pelo montador na pasta "assembler_cpp"
			Inicie a simulação do digital e clique na memoria de instrução com o botão direito
			Selecione todos os slots de memória e, com as instruções do arquivo "instructions" copiadas, cole as instruções na memória
			Para iniciar a execução das instruções, defina a entrada start do circuito como alta
			
			É possível ver os valores gravados clicando com o botão direito no banco de registradores ou memórias.


	MONTADOR: 
		Usar o implementado em cpp 

		arquivo de entrada: Index 			- recebe instruções com a codificação especificada abaixo
		arquivo de saida: 	instructions 	- onde são gravadas as instruções decodificadas, já na formatação correta para colar no componente de memória de instrução

		caso seja necessário usar outros nomes, estes podem ser passados como parâmetros na execução do script
		EX: 	assembler nome_arquivo_entrada nome_arquivo_saida

		OBS: Erros de sintaxe não são tradados, então se o código não sair formatado ou com letras no meio provavelmente é um erro na sintaxe
		OBS: Não usar enter entre comandos ou espaços adicionais 
		OBS: Não existe comentario - se vira ai pra entender 




Tamanhos: 
	Dados no banco de registradores: 8 registradores de 8 bits
	Seleção do endereço BR: 3 bits

	RAM - tamanho dos dados: 8 bits
	      tamanho do endereço: 3 bits

	MEMORIA DE INSTRUÇÃO:
		16 slots de 12 bits
			3 bits de codigo da instrução
			9 bits de endereçamento
				3 para cada endereço do BR/Memoria



	INSTRUÇÕES					CODIGO	ORG. DA INSTRUÇÃO	SEMANTICA		SINTAXE					OBJETIVO
	puxar da RAM pro banco 		(000)	000-ddd-eee-xxx		rd <- (e)		ldrm ro, md;			salva dado do registrador pra memoria
	mandar do banco pra RAM 	(001)	001-ddd-eee-xxx		(e) <- rd		ldmr rd, mo;			carrega da memoria pro registrador 
	soma						(010)	010-ddd-aaa-bbb		rd <- a + b		add	rd, ra, rb;			soma ra e rb e manda pra rd
	subtraçãp					(011)	011-ddd-aaa-bbb		rd <- a - b		sub	rd, ra, rb;			subtrai ra e rb e manda pra rd
	multiplicação				(100)	100-ddd-aaa-bbb		rd <- a x b		mul	rd, ra, rb;			multiplica ra e rb e manda pra rd
	divisão						(101) 	101-ddd-aaa-bbb		rd <- a % b		div	rd, ra, rb;			divide ra e rb e manda pra rd
	carregar ct em reg			(110)	110-ddd-cccccc		rd <- const		lct rd, const;			carrega constante no registrador 

	lct rd, const;		carrega constante no registrador 
	add	rd, ra, rb;		soma ra e rb e manda pra rd
	sub	rd, ra, rb;		subtrai ra e rb e manda pra rd
	mul	rd, ra, rb;		multiplica ra e rb e manda pra rd
	div	rd, ra, rb;		divide ra e rb e manda pra rd
	ldrm ro, md;		salva dado do registrador pra memoria 
	ldmr rd, mo;		carrega da memoria pro registrador 

CODIGO de instrução: 
	cccdddsssggg

	xxx - don't care 
	ccc - codigo da instrução 
	ddd - endereço do registrador de destino do resultado
	sss - endereço do registrador do a da operação	
	ggg - endereço do registrador do b da operação	
	cccccc - constante de 6 bits 

MANIPULAÇÕES: 
	BANCO DE REGISTRADORES: 
		GRAVAR DADO: 
			din <- dado a ser armazenado
			rw <- numero do registrador
			we <- 1
			CLK
			
		LER DADO
			Ra ou Rb <- endereço do registrador
	


	MEMORIA
		GRAVAR DADO
			A <- endereço
			Din <- dado 
			str <= 1
			CLK
				
		LER DADO
			A <- endereço
			id <- 1
			
			
EXEMPLO: 
110000000110 -- 1100 0000 0110 -- 0xC06 C	
110001000100 -- 1100 0100 0100 -- 0xC44	C	
110010000010 -- 1100 1000 0010 -- 0xC82 C	
010011000001 -- 0100 1100 0001 -- 0x4C1 C
010011011010 -- 0100 1101 1010 -- 0x4DA C
001011000000 -- 0010 1100 0000 -- 0x2C0 C

001011001000	0010 1100 1000	0x2C8
000100000000	0001 0000 0000	0x100
000101001000	0001 0100 1000	0x148
010110100101	0101 1010 0101	0x5A5
001110011000	0011 1001 1000	0x398

111000000000		       --  0xe00


EXEMPLO 2: Teste com todas as operações 

lct r0, 8;			110000001000	0xC08			
lct r1, 2; 			110001000010    0xC42

ldrm r0, m0;		001000000000	0x200
ldrm r1, m1;		001001001000	0x248

add r2, r0, r1; 	010010000001	0x481
sub r3, r0, r1;		011011000001	0x6C1
mul r4, r0, r1;		100100000001	0x901
div r5, r0, r1; 	101101000001	0xB41

ldrm r2, m2;		001010010000	0x290
ldrm r3, m3;		001011011000	0x2D8
ldrm r4, m4;		001100100000	0x320
ldrm r5, m5;		001101101000	0x368

111000000000		                0xe00	


CONJUNTO DE INSTRUÇÕES 

	lct rd, const;		carrega constante no registrador 
	add	rd, ra, rb;		soma ra e rb e manda pra rd
	sub	rd, ra, rb;		subtrai ra e rb e manda pra rd
	mul	rd, ra, rb;		multiplica ra e rb e manda pra rd
	div	rd, ra, rb;		divide ra e rb e manda pra rd
	ldrm ro, md;		salva dado do registrador pra memoria 
	ldmr rd, mo;		carrega da memoria pro registrador 















